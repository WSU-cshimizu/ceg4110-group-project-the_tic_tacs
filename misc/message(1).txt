package com.example.catmath


import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.catmath.ui.theme.CatMathTheme
import com.example.catmath.R


class MainActivity : ComponentActivity() {
   @OptIn(ExperimentalMaterial3Api::class)
   override fun onCreate(savedInstanceState: Bundle?) {
       super.onCreate(savedInstanceState)
//       enableEdgeToEdge()
       setContent {
           CatMathTheme {
               Scaffold(
                   modifier = Modifier.fillMaxSize(),
                   topBar = {
                       TopAppBar(
                           title = {


                               ProgressBarWithText(
                                   currentXP = 0,
                                   xpMax = 1000
                               )
                           },
                           modifier = Modifier.fillMaxWidth()
                       )
                   }
               ) { innerPadding ->
                   Box(modifier = Modifier.fillMaxSize()) {
                       // Set the background image
                       Image(
                           painter = painterResource(id = R.drawable.cute_cat),
                           contentDescription = "Cat Background",
                           contentScale = ContentScale.Crop,
                           modifier = Modifier.fillMaxSize()
                       )


                       UserAvatar()


                       UserNameText(username = "Users Name")


                       // Your greeting text on top of the image
                       Greeting(
                           name = "CatMaster",
                           modifier = Modifier.padding(innerPadding)
                               .padding(innerPadding)
                               .align(Alignment.TopCenter)
                       )
                   }
               }
           }
       }
   }


   @Composable
   fun ProgressBarWithText(currentXP: Int, xpMax: Int) {
       val progress = currentXP.toFloat() / xpMax.toFloat()


       Column(
           horizontalAlignment = Alignment.CenterHorizontally,
           verticalArrangement = Arrangement.Center,
           modifier = Modifier.fillMaxWidth().padding(16.dp)
       ) {
           // ProgressBar
           LinearProgressIndicator(
               progress = progress,
               modifier = Modifier
                   .fillMaxWidth()
                   .height(8.dp),
               color = MaterialTheme.colorScheme.primary
           )
           // XP Text
           Text(
               text = "$currentXP / $xpMax XP",
               style = MaterialTheme.typography.bodyMedium,
               modifier = Modifier.padding(top = 8.dp)
           )
       }
   }


   @Composable
   fun Greeting(name: String, modifier: Modifier = Modifier) {
       Text(
           text = "Hello $name!",
           modifier = modifier
               .fillMaxSize()
               .wrapContentSize(Alignment.Center), // Centers the text
           style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold), // Sets font to bold
           textAlign = TextAlign.Center // Centers the text alignment
       )
   }


   @Preview(showBackground = true)
   @Composable
   fun GreetingPreview() {
       CatMathTheme {
           Greeting("Android")
       }
   }


   @Composable
   fun UserAvatar() {
       Box(
           modifier = Modifier
               .size(150.dp) // Size of the avatar box
               .padding(top = 65.dp)
               .wrapContentSize(Alignment.TopCenter) // Align the image to the top center of the screen
       ) {
           Image(
               painter = painterResource(id = R.drawable.cat_avatar1),
               contentDescription = "User Avatar",
               modifier = Modifier
                   .size(100.dp) // Avatar size
                   .clip(CircleShape)
                   .align(Alignment.Center), // Center the image within the Box
               contentScale = ContentScale.Crop
           )
       }
   }




   @Composable
   fun UserNameText(username: String) {
       Text(
           text = username,
           style = MaterialTheme.typography.headlineLarge.copy(fontWeight = FontWeight.Bold),
           modifier = Modifier
               .absolutePadding(left = 30.dp, top = 60.dp)
               .fillMaxWidth(),
           textAlign = TextAlign.Center
       )
   }
}

